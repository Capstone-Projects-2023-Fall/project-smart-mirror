"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[3961],{3905:(e,t,r)=>{r.d(t,{Zo:()=>h,kt:()=>u});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),l=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},h=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),p=l(r),m=n,u=p["".concat(c,".").concat(m)]||p[m]||d[m]||i;return r?a.createElement(u,o(o({ref:t},h),{},{components:r})):a.createElement(u,o({ref:t},h))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:n,o[1]=s;for(var l=2;l<i;l++)o[l]=r[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5531:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=r(7462),n=(r(7294),r(3905));const i={sidebar_position:1},o=void 0,s={unversionedId:"system-architecture/design",id:"system-architecture/design",title:"design",description:"Purpose",source:"@site/docs/system-architecture/design.md",sourceDirName:"system-architecture",slug:"/system-architecture/design",permalink:"/project-smart-mirror/docs/system-architecture/design",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Fall/project-smart-mirror/edit/main/documentation/docs/system-architecture/design.md",tags:[],version:"current",lastUpdatedBy:"Saitama",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"System Architecture",permalink:"/project-smart-mirror/docs/category/system-architecture"},next:{title:"API Specification",permalink:"/project-smart-mirror/docs/category/api-specification"}},c={},l=[],h={toc:l};function p(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Purpose")),(0,n.kt)("p",null,"The Design Document - Part I Architecture describes the software architecture and how the requirements are mapped into the design. This document will be a combination of diagrams and text that describes what the diagrams are showing."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Sequence Diagrams")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Use Case #4 Height/Weight Tracking"),": A user wants to set a weight goal from scratch and track their height and weight so they will have an easy way to access the knowledge needed to work towards their ideal weight."),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Height/Weight Tracking Description"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Opens the companion app."),(0,n.kt)("li",{parentName:"ol"},"Navigates to the Health section of the app."),(0,n.kt)("li",{parentName:"ol"},"Presses the Add Weight Goal button."),(0,n.kt)("li",{parentName:"ol"},"Inputs their desired weight."),(0,n.kt)("li",{parentName:"ol"},"Inputs their height and weight."),(0,n.kt)("li",{parentName:"ol"},"Saves their progress."),(0,n.kt)("li",{parentName:"ol"},"May update their height and weight when they wish."),(0,n.kt)("li",{parentName:"ol"},"Adds the built-in health widget to their sub-profile."),(0,n.kt)("li",{parentName:"ol"},"Is able to view their weight goal and weight history.\n",(0,n.kt)("img",{parentName:"li",src:"https://github.com/Capstone-Projects-2023-Fall/project-smart-mirror/assets/112418620/db79c4be-2220-4459-b44f-fa02a9755224",alt:"Height_Weight Tracking"})))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Use Case #5 Rainy Day"),": A user that wants to be informed on what to wear throughout the day as they are rushing to get ready to leave the house for work."),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Rainy Day Description"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"They step in front of the mirror as they do their daily morning routine in the bathroom."),(0,n.kt)("li",{parentName:"ol"},"The camera detects the user\u2019s face with the camera and turns on the screen display behind the 2 way mirror."),(0,n.kt)("li",{parentName:"ol"},"The mirror's Rasberry Pi retrieves data from the Open Weather API."),(0,n.kt)("li",{parentName:"ol"},"The mirrors widget display shows a heavy rain forecast icon in the afternoon despite being currently clear as day."),(0,n.kt)("li",{parentName:"ol"},"The user remembers to grab their raincoat and umbrella and goes about their day avoiding the uncomfortableness of cold rain.\n",(0,n.kt)("img",{parentName:"li",src:"https://github.com/Capstone-Projects-2023-Fall/project-smart-mirror/assets/70285068/14a00b33-b869-43c2-982b-b520063bfc68",alt:"sequence diagram"})))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Use Case #6  ToDo List"),": A user that has a busy day full of important tasks to do wants to reference his Todo list on the cloud when they\u2019re at home"),(0,n.kt)("details",null,(0,n.kt)("summary",null,"ToDo List Description"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The user opens up the smart mirror companion app and fills out his important task of checking in with his family member weekly after work."),(0,n.kt)("li",{parentName:"ol"},"The user goes about his normal routine, gets back home later on and views their mirror which reminds them of their task."),(0,n.kt)("li",{parentName:"ol"},"After being reminded, they call their family members and see how they are doing."),(0,n.kt)("li",{parentName:"ol"},"When the call is finished they open the companion app and check off their task for this week.")),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://github.com/Capstone-Projects-2023-Fall/project-smart-mirror/assets/74268497/3af74675-8621-435a-96a1-2f9e3bbda73b",alt:"Use case 6"}))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Algorithim"),"\nA smart mirror employing face recognition to enable user access follows a straightforward process. Equipped with an embedded camera, the mirror captures live video of individuals in its vicinity. This video feed is then processed to detect faces, utilizing algorithms like Haar cascades or deep learning-based face detection models. Once a face is detected, a pre-trained face recognition model compares the facial features extracted from the detected face with those of authorized users stored in a database. If a match is found within an acceptable confidence level, the system authenticates the user and unlocks the smart mirror, granting access to personalized information such as calendar events, weather updates, or other tailored data. The mirror automatically locks when it no longer detects a recognized face, enhancing security and privacy. In cases where face recognition might not work optimally, a fallback mechanism such as a PIN code or traditional key could be provided for authentication, ensuring a reliable and secure user experience."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Database")),(0,n.kt)("p",null,"Entity-relation diagram."),(0,n.kt)("p",null,"Table design."),(0,n.kt)("p",null,"A check list for architecture design is attached here ",(0,n.kt)("a",{parentName:"p",href:"https://templeu.instructure.com/courses/106563/files/16928870/download?wrap=1",title:"architecture_design_checklist.pdf"},"architecture","_","design","_","checklist.pdf"),"\xa0 and should be used as a guidance."))}p.isMDXComponent=!0}}]);