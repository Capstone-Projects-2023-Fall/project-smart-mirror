"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[9538],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(a),u=r,k=m["".concat(l,".").concat(u)]||m[u]||d[u]||i;return a?n.createElement(k,s(s({ref:t},c),{},{components:a})):n.createElement(k,s({ref:t},c))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[m]="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},8834:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const i={},s="System-Core",o={unversionedId:"api-specification/systemcore-api",id:"api-specification/systemcore-api",title:"System-Core",description:"The system core is comprised of the System Class and the SystemUpdateHandler Class. These two work in cohesion to innitialize, maintain, and update the system.",source:"@site/docs/api-specification/systemcore-api.md",sourceDirName:"api-specification",slug:"/api-specification/systemcore-api",permalink:"/project-smart-mirror/docs/api-specification/systemcore-api",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Fall/project-smart-mirror/edit/main/documentation/docs/api-specification/systemcore-api.md",tags:[],version:"current",lastUpdatedBy:"Saitama",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Module Class API Documentation",permalink:"/project-smart-mirror/docs/api-specification/modules-api"},next:{title:"Weather Class API Documentation",permalink:"/project-smart-mirror/docs/api-specification/weather-api"}},l={},p=[{value:"<code>System</code> Class",id:"system-class",level:3},{value:"<code>SystemActionLoop()</code>",id:"systemactionloop",level:4},{value:"<code>WaitOnActivation()</code>",id:"waitonactivation",level:4},{value:"<code>ProcessUpdateInformation()</code>",id:"processupdateinformation",level:4},{value:"<code>SwitchUser()</code>",id:"switchuser",level:4},{value:"<code>SwitchUserProfile()</code>",id:"switchuserprofile",level:4},{value:"<code>SystemUpdateHandler</code> Class",id:"systemupdatehandler-class",level:3},{value:"<code>InitializeUpdater()</code>",id:"initializeupdater",level:4},{value:"<code>PullData()</code>",id:"pulldata",level:4},{value:"<code>ForceUpdate()</code>",id:"forceupdate",level:4}],c={toc:p};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"system-core"},"System-Core"),(0,r.kt)("p",null,"The system core is comprised of the System Class and the SystemUpdateHandler Class. These two work in cohesion to innitialize, maintain, and update the system."),(0,r.kt)("h1",{id:"system-class-api-documentation"},"System Class API Documentation"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Purpose:"),"\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"System")," class represents the core of a smart mirror system, responsible for managing system-wide operations."),(0,r.kt)("h3",{id:"system-class"},(0,r.kt)("inlineCode",{parentName:"h3"},"System")," Class"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Attributes:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Status")," (str): The current status of the system.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Methods:")),(0,r.kt)("h4",{id:"systemactionloop"},(0,r.kt)("inlineCode",{parentName:"h4"},"SystemActionLoop()")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Purpose:"),"\nInitiate the system action loop, which continuously performs system-level actions and maintains system integrity."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Pre-conditions:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The system must be initialized and in an active state.")),(0,r.kt)("h4",{id:"waitonactivation"},(0,r.kt)("inlineCode",{parentName:"h4"},"WaitOnActivation()")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Purpose:"),"\nWait for the system to activate."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Pre-conditions:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The system must be in a standby or inactive state.")),(0,r.kt)("h4",{id:"processupdateinformation"},(0,r.kt)("inlineCode",{parentName:"h4"},"ProcessUpdateInformation()")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Purpose:"),"\nProcess incoming update information for the smart mirror system."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Pre-conditions:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"There must be new update information available.")),(0,r.kt)("h4",{id:"switchuser"},(0,r.kt)("inlineCode",{parentName:"h4"},"SwitchUser()")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Purpose:"),"\nSwitch to a different user profile within the system."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Pre-conditions:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Multiple user profiles must exist in the system.")),(0,r.kt)("h4",{id:"switchuserprofile"},(0,r.kt)("inlineCode",{parentName:"h4"},"SwitchUserProfile()")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Purpose:"),"\nSwitch to a specific user profile within the system."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Pre-conditions:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The specified user profile must exist in the system.")),(0,r.kt)("h1",{id:"systemupdatehandler-class-api-documentation"},"SystemUpdateHandler Class API Documentation"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Purpose:"),"\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"SystemUpdateHandler")," class is responsible for managing and handling updates related to calendar information, weather data, and user preferences within a smart mirror system. It is associated with the core ",(0,r.kt)("inlineCode",{parentName:"p"},"System")," class."),(0,r.kt)("h3",{id:"systemupdatehandler-class"},(0,r.kt)("inlineCode",{parentName:"h3"},"SystemUpdateHandler")," Class"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Attributes:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"updateFrequency")," (int): The frequency at which updates are checked and fetched."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"lastUpdate")," (long int): Timestamp of the last update."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"calendarInfo")," (val): Information related to the calendar."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"weatherInfo")," (val): Information related to weather data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"userPreferences")," (val): User-specific preferences.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Methods:")),(0,r.kt)("h4",{id:"initializeupdater"},(0,r.kt)("inlineCode",{parentName:"h4"},"InitializeUpdater()")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Purpose:"),"\nInitialize the updater for handling updates."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Pre-conditions:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The smart mirror system must be running and initialized.")),(0,r.kt)("h4",{id:"pulldata"},(0,r.kt)("inlineCode",{parentName:"h4"},"PullData()")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Purpose:"),"\nRetrieve and update calendar information, weather data, and user preferences."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Pre-conditions:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The updater must be initialized.")),(0,r.kt)("h4",{id:"forceupdate"},(0,r.kt)("inlineCode",{parentName:"h4"},"ForceUpdate()")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Purpose:"),"\nForce an immediate update of calendar information, weather data, and user preferences."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Pre-conditions:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The updater must be initialized.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Association with Core ",(0,r.kt)("inlineCode",{parentName:"strong"},"System")," Class:")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"SystemUpdateHandler")," class is associated with the core ",(0,r.kt)("inlineCode",{parentName:"p"},"System")," class in the following way:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"System")," class initializes and manages the overall smart mirror system, including user profiles and system status.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"SystemUpdateHandler")," class, on the other hand, focuses on handling updates for specific data types like calendar information, weather data, and user preferences.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"SystemUpdateHandler")," class is part of the smart mirror system and works in conjunction with the ",(0,r.kt)("inlineCode",{parentName:"p"},"System")," class to ensure that relevant data is kept up to date for display on the smart mirror.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"System")," class can interact with the ",(0,r.kt)("inlineCode",{parentName:"p"},"SystemUpdateHandler")," to trigger updates or respond to update events, ensuring that the smart mirror provides timely and accurate information to users."))))}m.isMDXComponent=!0}}]);